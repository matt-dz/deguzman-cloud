// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailVerificationRequest = `-- name: CreateEmailVerificationRequest :exec
INSERT INTO email_verification_request (
    user_id, email, code, expires_at
) VALUES (
    $1, $2, $3, $4
)
`

type CreateEmailVerificationRequestParams struct {
	UserID    pgtype.UUID
	Email     string
	Code      string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateEmailVerificationRequest(ctx context.Context, arg CreateEmailVerificationRequestParams) error {
	_, err := q.db.Exec(ctx, createEmailVerificationRequest,
		arg.UserID,
		arg.Email,
		arg.Code,
		arg.ExpiresAt,
	)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (
    id, user_id, expires_at
) VALUES (
    $1, $2, $3
)
`

type CreateSessionParams struct {
	ID        string
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash)
    VALUES ($1, $2)
    RETURNING id
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteAllUserSessions = `-- name: DeleteAllUserSessions :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteAllUserSessions(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllUserSessions, userID)
	return err
}

const deleteEmailVerificationRequest = `-- name: DeleteEmailVerificationRequest :exec
DELETE FROM email_verification_request WHERE id = $1
`

func (q *Queries) DeleteEmailVerificationRequest(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationRequest, id)
	return err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUserSession, id)
	return err
}

const getEmailVerificationRequest = `-- name: GetEmailVerificationRequest :one
SELECT evr.id FROM email_verification_request AS evr INNER JOIN sessions AS s
    ON evr.user_id = s.user_id
        WHERE s.id = $1 AND evr.code = $2 AND evr.expires_at > now ()
`

type GetEmailVerificationRequestParams struct {
	ID   string
	Code string
}

func (q *Queries) GetEmailVerificationRequest(ctx context.Context, arg GetEmailVerificationRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationRequest, arg.ID, arg.Code)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getPasswordAndId = `-- name: GetPasswordAndId :one
SELECT id, password_hash FROM users WHERE email = $1
`

type GetPasswordAndIdRow struct {
	ID           pgtype.UUID
	PasswordHash string
}

func (q *Queries) GetPasswordAndId(ctx context.Context, email string) (GetPasswordAndIdRow, error) {
	row := q.db.QueryRow(ctx, getPasswordAndId, email)
	var i GetPasswordAndIdRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const getUserSessionBySessionId = `-- name: GetUserSessionBySessionId :one
SELECT
    sessions.id, sessions.user_id, sessions.expires_at, sessions.two_factor_verified,
    users.id,
    users.email,
    users.email_verified,
    users.registered_2fa
FROM sessions INNER JOIN users
    ON users.id = sessions.user_id
        WHERE sessions.id = $1
`

type GetUserSessionBySessionIdRow struct {
	Session       Session
	ID            pgtype.UUID
	Email         string
	EmailVerified bool
	Registered2fa bool
}

func (q *Queries) GetUserSessionBySessionId(ctx context.Context, id string) (GetUserSessionBySessionIdRow, error) {
	row := q.db.QueryRow(ctx, getUserSessionBySessionId, id)
	var i GetUserSessionBySessionIdRow
	err := row.Scan(
		&i.Session.ID,
		&i.Session.UserID,
		&i.Session.ExpiresAt,
		&i.Session.TwoFactorVerified,
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.Registered2fa,
	)
	return i, err
}

const updateEmailVerification = `-- name: UpdateEmailVerification :exec
UPDATE users SET email_verified = $1 WHERE id = $2
`

type UpdateEmailVerificationParams struct {
	EmailVerified bool
	ID            pgtype.UUID
}

func (q *Queries) UpdateEmailVerification(ctx context.Context, arg UpdateEmailVerificationParams) error {
	_, err := q.db.Exec(ctx, updateEmailVerification, arg.EmailVerified, arg.ID)
	return err
}

const updateSessionExpireation = `-- name: UpdateSessionExpireation :exec
UPDATE sessions SET expires_at = $1 WHERE id = $2
`

type UpdateSessionExpireationParams struct {
	ExpiresAt pgtype.Timestamptz
	ID        string
}

func (q *Queries) UpdateSessionExpireation(ctx context.Context, arg UpdateSessionExpireationParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpireation, arg.ExpiresAt, arg.ID)
	return err
}
