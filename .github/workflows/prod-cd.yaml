name: Production CD
on:
  push:
    branches: ["main"]
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-24.04-arm
    permissions:
      pull-requests: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      dsa: ${{ steps.filter.outputs.dsa }}
      qr: ${{ steps.filter.outputs.qr }}
      dss: ${{ steps.filter.outputs.dss }}
      auth-backend: ${{ steps.filter.outputs.auth-backend }}
      auth-frontend: ${{ steps.filter.outputs.auth-frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            dsa:
              - 'dsa/**'
            qr:
              - 'qr-code/**'
            dss:
              - 'dss/**'
            auth-backend:
              - 'auth-backend/**'
            auth-frontend:
              - 'auth-frontend/**'

  build-frontend:
    needs: changes
    name: Build Frontend
    environment: Frontend
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        working-directory: frontend
        env:
          VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
          VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL }}
          VITE_AUTH_BACKEND_URL: ${{ vars.VITE_AUTH_BACKEND_URL }}
        run: |
          npm run build
          make docker-push TAG=$(git rev-parse --short "$GITHUB_SHA")
          make docker-push TAG=latest

  build-qr:
    needs: changes
    name: Build QR Code Generator
    if: ${{ needs.changes.outputs.qr == 'true' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        working-directory: qr-code
        run: |
          npm run build
          make docker-push TAG=$(git rev-parse --short "$GITHUB_SHA")
          make docker-push TAG=latest

  build-dsa:
    needs: changes
    name: Build DSA Discussion
    if: ${{ needs.changes.outputs.dsa == 'true' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        working-directory: dsa
        run: |
          npm run build
          make docker-push TAG=$(git rev-parse --short "$GITHUB_SHA")
          make docker-push TAG=latest

  build-dss:
    needs: changes
    name: Build DSS
    if: ${{ needs.changes.outputs.dss == 'true' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        working-directory: dss
        run: |
          make build
          make docker-push TAG=$(git rev-parse --short "$GITHUB_SHA")
          make docker-push TAG=latest

  build-auth-backend:
    needs: changes
    name: Build Auth Backend
    if: ${{ needs.changes.outputs.auth-backend == 'true' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        working-directory: auth-backend
        run: |
          make build
          make docker-push TAG=$(git rev-parse --short "$GITHUB_SHA")
          make docker-push TAG=latest

  build-auth-frontend:
    needs: changes
    name: Build Auth Frontend
    environment: Auth Frontend
    if: ${{ needs.changes.outputs.auth-frontend == 'true' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        working-directory: auth-frontend
        env:
          VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
          VITE_HOME_URL: ${{ vars.VITE_HOME_URL }}
        run: |
          npm run build
          make docker-push TAG=$(git rev-parse --short "$GITHUB_SHA")
          make docker-push TAG=latest

  deploy-frontend:
    needs: build-frontend
    name: Rollout Frontend Deployment
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Rollout deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            kubectl rollout restart deployment dgc-frontend -n dgc

  deploy-qr:
    needs: build-qr
    name: Rollout QR Code Deployment
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Rollout deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            kubectl rollout restart deployment qrcode-frontend -n qrcode

  deploy-dsa:
    needs: build-dsa
    name: Rollout DSA Deployment
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Rollout deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            kubectl rollout restart deployment dsa-frontend -n dsa

  deploy-dss:
    needs: build-dss
    name: Rollout DSS Deployment
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Rollout deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            kubectl rollout restart deployment dss -n dss

  deploy-auth-backend:
    needs: build-auth-backend
    name: Rollout DeGuzman Auth Backend Deployment
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Rollout deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            kubectl rollout restart deployment auth-backend -n deguzman-auth

  deploy-auth-frontend:
    needs: build-auth-frontend
    name: Rollout DeGuzman Auth Frontend Deployment
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Rollout deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            kubectl rollout restart deployment auth-frontend -n deguzman-auth
